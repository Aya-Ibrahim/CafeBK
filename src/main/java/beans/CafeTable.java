package beans;
// Generated May 12, 2017 3:22:27 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * CafeTable generated by hbm2java
 */
@Entity
@Table(name = "cafe_table",
        catalog = "arkancafe"
)
public class CafeTable implements java.io.Serializable {

    private Integer tableId;
    private String tableName;
    private boolean empty;
    private Order lastOrder;
    private Set<Order> orders = new HashSet<Order>(0);

    public CafeTable() {
    }

    public CafeTable(String tableName, boolean empty) {
        this.tableName = tableName;
        this.empty = empty;
    }

    public CafeTable(String tableName, boolean empty, Set<Order> orders) {
        this.tableName = tableName;
        this.empty = empty;
        this.orders = orders;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "table_id", unique = true, nullable = false)
    public Integer getTableId() {
        return this.tableId;
    }

    public void setTableId(Integer tableId) {
        this.tableId = tableId;
    }

    @Column(name = "table_name", nullable = false, length = 25)
    public String getTableName() {
        return this.tableName;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    @Column(name = "empty", nullable = false)
    public boolean isEmpty() {
        return this.empty;
    }

    public void setEmpty(boolean empty) {
        this.empty = empty;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "lastOrder")
    public Order getLastOrder() {
        return this.lastOrder;
    }

    public void setLastOrder(Order lastOrder) {
        this.lastOrder = lastOrder;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cafeTable")
    public Set<Order> getOrders() {
        return this.orders;
    }

    public void setOrders(Set<Order> orders) {
        this.orders = orders;
    }

}
